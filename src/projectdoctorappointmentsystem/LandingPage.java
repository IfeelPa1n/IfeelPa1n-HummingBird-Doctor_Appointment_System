/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projectdoctorappointmentsystem;
import java.util.Map;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
/**
 *
 * @author GabuyaJanson
 *  Verification code
 *  Work to do
 *  Finish Secretary and Doctor bar logic!
        
 */
public class LandingPage extends javax.swing.JFrame {
    private boolean LGPAC;
    private boolean LGSAC;
    private boolean LGDAC;  
    private boolean DPTS; // Database Patient to Secretary
    private boolean DSTS; // Database Secretary to Secretary
    private boolean DDTD; // Database Doctor to Doctor
    /**
     * Creates new form DoctorWorkPlace
     */
    public LandingPage() {
        initComponents();
        //Testing
        Decline1.setVisible(false);
        z1.setVisible(false);
        z2.setVisible(false);
        z3.setVisible(false);
        z4.setVisible(false);
        //Patient
        PatientScrollPane.setVisible(false);
        PatientReminderPane.setVisible(false);
        ApplyBook.setVisible(false);
        ClinicVisit.setVisible(false);
        Online.setVisible(false);
        Feedback.setVisible(false);
        Rating.setVisible(false);
        PatientLogOFF.setVisible(false);
        // Secretary
        SecretaryScrollPane.setVisible(false);
        PatientBookRequest.setVisible(false);
        SecretaryPatientPane.setVisible(false);
        Approved.setVisible(false);
        Decline.setVisible(false);
        SecretaryLogOFF.setVisible(false);
        // Doctor
        DoctorScrollPane.setVisible(false);
        DoctorAllAccountPane.setVisible(false);
        Modify.setVisible(false);
        Avail.setVisible(false);
        Schedule.setVisible(false);
        Schedule1.setVisible(false);
        DoctorLogOFF.setVisible(false);
        
        CloseModify.setVisible(false);
        DChange.setVisible(false);
        ChangeGMail.setVisible(false);
        ChangeGM.setVisible(false);
        ChangeContact.setVisible(false);
        ChangeCN.setVisible(false);
        ChangeAge.setVisible(false);
        ChangeAE.setVisible(false);
        ChangeLastName.setVisible(false);
        ChangeLN.setVisible(false);
        ChangeFirstName.setVisible(false);
        ChangeFN.setVisible(false);
        
        
        //Bar
        ID.setVisible(false);
        IDNumber.setVisible(false);
        FN.setVisible(false);
        FirstName.setVisible(false);
        LN.setVisible(false);
        LastName.setVisible(false);
        AE.setVisible(false);
        Age.setVisible(false);
        CN.setVisible(false);
        Contact.setVisible(false);
        GM.setVisible(false);
        GMail.setVisible(false);
        ApplyInfo.setVisible(false);
        ApplyInfo1.setVisible(false);
        
    }
    
       /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LogUser = new javax.swing.JTextField();
        LogPass = new javax.swing.JTextField();
        component1 = new javax.swing.JLabel();
        component2 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        WelcomeAccount = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        FN = new javax.swing.JLabel();
        LN = new javax.swing.JLabel();
        FirstName = new javax.swing.JTextField();
        AE = new javax.swing.JLabel();
        CN = new javax.swing.JLabel();
        GM = new javax.swing.JLabel();
        LastName = new javax.swing.JTextField();
        Age = new javax.swing.JTextField();
        Contact = new javax.swing.JTextField();
        ApplyInfo = new javax.swing.JButton();
        PatientScrollPane = new javax.swing.JScrollPane();
        PatientInfoTable = new javax.swing.JTable();
        ID = new javax.swing.JLabel();
        GMail = new javax.swing.JTextField();
        IDNumber = new javax.swing.JTextField();
        SecretaryScrollPane = new javax.swing.JScrollPane();
        SecretaryInfoTable = new javax.swing.JTable();
        ApplyBook = new javax.swing.JButton();
        PatientBookRequest = new javax.swing.JScrollPane();
        PatientBookTable = new javax.swing.JTable();
        Approved = new javax.swing.JButton();
        Decline = new javax.swing.JButton();
        PatientReminderPane = new javax.swing.JScrollPane();
        PatientReminderTable = new javax.swing.JTable();
        ClinicVisit = new javax.swing.JButton();
        Online = new javax.swing.JButton();
        Feedback = new javax.swing.JButton();
        Rating = new javax.swing.JButton();
        DoctorScrollPane = new javax.swing.JScrollPane();
        DoctorInfoTable = new javax.swing.JTable();
        Avail = new javax.swing.JButton();
        Modify = new javax.swing.JButton();
        Schedule = new javax.swing.JButton();
        SecretaryLogOFF = new javax.swing.JButton();
        PatientLogOFF = new javax.swing.JButton();
        DoctorLogOFF = new javax.swing.JButton();
        ApplyInfo1 = new javax.swing.JButton();
        SecretaryPatientPane = new javax.swing.JScrollPane();
        SecretaryPatientTable = new javax.swing.JTable();
        DoctorAllAccountPane = new javax.swing.JScrollPane();
        DoctorAllAccountTable = new javax.swing.JTable();
        ChangeLastName = new javax.swing.JTextField();
        ChangeAge = new javax.swing.JTextField();
        ChangeContact = new javax.swing.JTextField();
        ChangeGMail = new javax.swing.JTextField();
        ChangeFN = new javax.swing.JLabel();
        ChangeLN = new javax.swing.JLabel();
        ChangeFirstName = new javax.swing.JTextField();
        ChangeAE = new javax.swing.JLabel();
        ChangeCN = new javax.swing.JLabel();
        ChangeGM = new javax.swing.JLabel();
        DChange = new javax.swing.JButton();
        CloseModify = new javax.swing.JButton();
        Schedule1 = new javax.swing.JButton();
        z1 = new javax.swing.JTextField();
        z2 = new javax.swing.JTextField();
        Decline1 = new javax.swing.JButton();
        z3 = new javax.swing.JTextField();
        z4 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Landing Page");
        setPreferredSize(new java.awt.Dimension(1400, 750));
        setResizable(false);

        LogUser.setToolTipText("");
        LogUser.setMinimumSize(new java.awt.Dimension(64, 26));
        LogUser.setPreferredSize(new java.awt.Dimension(130, 26));
        LogUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogUserActionPerformed(evt);
            }
        });

        LogPass.setToolTipText("");
        LogPass.setMinimumSize(new java.awt.Dimension(64, 26));
        LogPass.setPreferredSize(new java.awt.Dimension(130, 26));

        component1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        component1.setText("USERNAME:");

        component2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        component2.setText("PASSWORD:");

        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton5.setText("Login");
        jButton5.setPreferredSize(new java.awt.Dimension(80, 26));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        WelcomeAccount.setPreferredSize(new java.awt.Dimension(37, 28));

        jButton6.setText("Switch Account");
        jButton6.setPreferredSize(new java.awt.Dimension(75, 26));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        FN.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        FN.setText("First Name:");

        LN.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LN.setText("Last Name:");

        FirstName.setToolTipText("");
        FirstName.setMinimumSize(new java.awt.Dimension(64, 26));
        FirstName.setPreferredSize(new java.awt.Dimension(130, 26));

        AE.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        AE.setText("Age:");

        CN.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        CN.setText("Contact No.:");

        GM.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        GM.setText("Gmail:");

        LastName.setToolTipText("");
        LastName.setMinimumSize(new java.awt.Dimension(64, 26));
        LastName.setPreferredSize(new java.awt.Dimension(130, 26));

        Age.setToolTipText("");
        Age.setMinimumSize(new java.awt.Dimension(64, 26));
        Age.setPreferredSize(new java.awt.Dimension(130, 26));

        Contact.setToolTipText("");
        Contact.setMinimumSize(new java.awt.Dimension(64, 26));
        Contact.setPreferredSize(new java.awt.Dimension(130, 26));

        ApplyInfo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ApplyInfo.setText("Apply");
        ApplyInfo.setPreferredSize(new java.awt.Dimension(80, 26));
        ApplyInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyInfoActionPerformed(evt);
            }
        });

        PatientInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First Name", "Last Name", "Age", "Contact Info", "Gmail", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PatientScrollPane.setViewportView(PatientInfoTable);

        ID.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ID.setText("ID:");

        GMail.setToolTipText("");
        GMail.setMinimumSize(new java.awt.Dimension(64, 26));
        GMail.setPreferredSize(new java.awt.Dimension(130, 26));

        IDNumber.setToolTipText("");
        IDNumber.setMinimumSize(new java.awt.Dimension(64, 26));
        IDNumber.setPreferredSize(new java.awt.Dimension(130, 26));

        SecretaryInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First Name", "Last Name", "Age", "Contact Info", "Gmail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SecretaryScrollPane.setViewportView(SecretaryInfoTable);

        ApplyBook.setText("Book");
        ApplyBook.setPreferredSize(new java.awt.Dimension(75, 26));
        ApplyBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyBookActionPerformed(evt);
            }
        });

        PatientBookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Gmail", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PatientBookRequest.setViewportView(PatientBookTable);

        Approved.setText("Approved");
        Approved.setPreferredSize(new java.awt.Dimension(75, 26));
        Approved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApprovedActionPerformed(evt);
            }
        });

        Decline.setText("Disapproved");
        Decline.setPreferredSize(new java.awt.Dimension(75, 26));
        Decline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeclineActionPerformed(evt);
            }
        });

        PatientReminderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "REMINDERS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PatientReminderPane.setViewportView(PatientReminderTable);

        ClinicVisit.setText("In Clinic Visit");
        ClinicVisit.setPreferredSize(new java.awt.Dimension(75, 26));
        ClinicVisit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClinicVisitActionPerformed(evt);
            }
        });

        Online.setText("Online ");
        Online.setPreferredSize(new java.awt.Dimension(75, 26));
        Online.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OnlineActionPerformed(evt);
            }
        });

        Feedback.setText("Feedback & Rating");
        Feedback.setPreferredSize(new java.awt.Dimension(75, 26));
        Feedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FeedbackActionPerformed(evt);
            }
        });

        Rating.setText("Refresh Reminder");
        Rating.setPreferredSize(new java.awt.Dimension(75, 26));
        Rating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RatingActionPerformed(evt);
            }
        });

        DoctorInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First Name", "Last Name", "Age", "Contact Info", "Gmail", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DoctorScrollPane.setViewportView(DoctorInfoTable);

        Avail.setText("Availability");
        Avail.setPreferredSize(new java.awt.Dimension(75, 26));
        Avail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AvailActionPerformed(evt);
            }
        });

        Modify.setText("Modify");
        Modify.setPreferredSize(new java.awt.Dimension(75, 26));
        Modify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifyActionPerformed(evt);
            }
        });

        Schedule.setText("Schedule");
        Schedule.setPreferredSize(new java.awt.Dimension(75, 26));
        Schedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScheduleActionPerformed(evt);
            }
        });

        SecretaryLogOFF.setText("Log OFF");
        SecretaryLogOFF.setPreferredSize(new java.awt.Dimension(75, 26));
        SecretaryLogOFF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SecretaryLogOFFActionPerformed(evt);
            }
        });

        PatientLogOFF.setText("Log OFF");
        PatientLogOFF.setPreferredSize(new java.awt.Dimension(75, 26));
        PatientLogOFF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PatientLogOFFActionPerformed(evt);
            }
        });

        DoctorLogOFF.setText("Log OFF");
        DoctorLogOFF.setPreferredSize(new java.awt.Dimension(75, 26));
        DoctorLogOFF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoctorLogOFFActionPerformed(evt);
            }
        });

        ApplyInfo1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ApplyInfo1.setText("Apply");
        ApplyInfo1.setPreferredSize(new java.awt.Dimension(80, 26));
        ApplyInfo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyInfo1ActionPerformed(evt);
            }
        });

        SecretaryPatientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First Name", "Last Name", "Age", "Contact Info", "Gmail", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SecretaryPatientPane.setViewportView(SecretaryPatientTable);
        if (SecretaryPatientTable.getColumnModel().getColumnCount() > 0) {
            SecretaryPatientTable.getColumnModel().getColumn(6).setHeaderValue("STATUS");
        }

        DoctorAllAccountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "Test", "Test", "Test", "Test", "Test", null, null}
            },
            new String [] {
                "ID", "UserName", "First Name", "Last Name", "Age", "Contact Info", "Gmail", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DoctorAllAccountPane.setViewportView(DoctorAllAccountTable);

        ChangeLastName.setToolTipText("");
        ChangeLastName.setMinimumSize(new java.awt.Dimension(64, 26));
        ChangeLastName.setPreferredSize(new java.awt.Dimension(130, 26));

        ChangeAge.setToolTipText("");
        ChangeAge.setMinimumSize(new java.awt.Dimension(64, 26));
        ChangeAge.setPreferredSize(new java.awt.Dimension(130, 26));

        ChangeContact.setToolTipText("");
        ChangeContact.setMinimumSize(new java.awt.Dimension(64, 26));
        ChangeContact.setPreferredSize(new java.awt.Dimension(130, 26));

        ChangeGMail.setToolTipText("");
        ChangeGMail.setMinimumSize(new java.awt.Dimension(64, 26));
        ChangeGMail.setPreferredSize(new java.awt.Dimension(130, 26));

        ChangeFN.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ChangeFN.setText("First Name:");

        ChangeLN.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ChangeLN.setText("Last Name:");

        ChangeFirstName.setToolTipText("");
        ChangeFirstName.setMinimumSize(new java.awt.Dimension(64, 26));
        ChangeFirstName.setPreferredSize(new java.awt.Dimension(130, 26));

        ChangeAE.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ChangeAE.setText("Age:");

        ChangeCN.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ChangeCN.setText("Contact No.:");

        ChangeGM.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ChangeGM.setText("Gmail:");

        DChange.setText("Change");
        DChange.setPreferredSize(new java.awt.Dimension(75, 26));
        DChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DChangeActionPerformed(evt);
            }
        });

        CloseModify.setText("Close Modify");
        CloseModify.setPreferredSize(new java.awt.Dimension(75, 26));
        CloseModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseModifyActionPerformed(evt);
            }
        });

        Schedule1.setText("View My Sched");
        Schedule1.setPreferredSize(new java.awt.Dimension(75, 26));
        Schedule1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Schedule1ActionPerformed(evt);
            }
        });

        z1.setText("jTextField1");

        z2.setText("jTextField1");

        Decline1.setText("Refresh");
        Decline1.setPreferredSize(new java.awt.Dimension(75, 26));
        Decline1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Decline1ActionPerformed(evt);
            }
        });

        z3.setText("jTextField1");

        z4.setText("jTextField1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(FN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(component1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LogUser, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(LN)
                            .addComponent(component2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(LogPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LastName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Age, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(WelcomeAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(CN)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Contact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(45, 45, 45)
                                        .addComponent(GM)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(GMail, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(ID)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(IDNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(ApplyInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(ApplyInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SecretaryLogOFF, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DoctorLogOFF, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(38, 38, 38))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SecretaryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PatientBookRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(PatientScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PatientReminderPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(PatientLogOFF, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ApplyBook, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Approved, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ClinicVisit, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Online, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Feedback, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                    .addComponent(Rating, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ChangeFN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ChangeFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ChangeLN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ChangeLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ChangeAE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ChangeAge, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(ChangeCN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ChangeContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(ChangeGM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ChangeGMail, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(DChange, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DoctorAllAccountPane, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Modify, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CloseModify, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(SecretaryPatientPane, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(Schedule1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(DoctorScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Avail, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Schedule, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(829, 829, 829)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Decline, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Decline1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(z3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(z4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(z2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(z1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(273, 273, 273))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(component1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(LogUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(component2)
                        .addComponent(LogPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(PatientLogOFF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(WelcomeAccount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SecretaryLogOFF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DoctorLogOFF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ApplyBook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ClinicVisit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Feedback, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Online, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Rating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(PatientReminderPane, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PatientScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(PatientBookRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SecretaryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Approved, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Decline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Decline1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SecretaryPatientPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FN)
                            .addComponent(LN)
                            .addComponent(FirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AE)
                            .addComponent(CN)
                            .addComponent(GM)
                            .addComponent(LastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Age, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Contact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ApplyInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ID)
                            .addComponent(GMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(IDNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ApplyInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DoctorScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Avail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Schedule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Schedule1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DoctorAllAccountPane, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Modify, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CloseModify, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ChangeFN)
                            .addComponent(ChangeLN)
                            .addComponent(ChangeFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ChangeAE)
                            .addComponent(ChangeCN)
                            .addComponent(ChangeGM)
                            .addComponent(ChangeLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ChangeAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ChangeContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ChangeGMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 174, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(z2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(z4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(z1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(z3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        RegisterAccount p1 = new RegisterAccount();
        LogUser.setText("");
        LogPass.setText("");
        WelcomeAccount.setText("");
        p1.Transfer.setVisible(false);
        p1.ExitForm.setVisible(false);
        p1.TransferVer2.setVisible(true);
        p1.show();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        LGPAC = false;
        LGSAC = false;
        LGDAC = false;
        DPTS = false;
        DSTS = false;
        DDTD = false;
        
        LGSAC = Database.SecretaryDataRegister.validate(LogUser.getText(), LogPass.getText());
        LGPAC = Database.PatientDataRegister.validate(LogUser.getText(), LogPass.getText());
        LGDAC = Database.DoctorDataRegister.validate(LogUser.getText(), LogPass.getText());
        DPTS = Database_PatientToSecretary.PatientApplicationDatabase.checkValid(LogUser.getText(), LogPass.getText());
        DSTS = Database_SecretaryToSecretary.SecretaryApplicationDatabase.checkValid(LogUser.getText(), LogPass.getText());
        DDTD = Database_DoctorToDoctor.DoctorApplicationDatabase.checkValid(LogUser.getText(), LogPass.getText());
        
        if(LGPAC && !LGSAC && !LGDAC && !DPTS){ // Patient account with no DataAppli
            WelcomeAccount.setText("Welcome Patient ("+ LogUser.getText()+ ")!");
        ID.setVisible(true);
        IDNumber.setVisible(true);
        FN.setVisible(true);
        FirstName.setVisible(true);
        LN.setVisible(true);
        LastName.setVisible(true);
        AE.setVisible(true);
        Age.setVisible(true);
        CN.setVisible(true);
        Contact.setVisible(true);
        GM.setVisible(true);
        GMail.setVisible(true);
        ApplyInfo1.setVisible(true);
        PatientLogOFF.setVisible(true);
        
        jButton5.setEnabled(false);
        }
        else if(LGPAC && !LGSAC && !LGDAC && DPTS){ // Patient Account with DataAppli
            String[] applicationInfoP = Database_PatientToSecretary.PatientApplicationDatabase.getApplicationInfo(LogUser.getText(), LogPass.getText());
            
            String idP = applicationInfoP[2];
            String fstnmP = applicationInfoP[3];
            String lstnmP = applicationInfoP[4];
            String agP = applicationInfoP[5];
            String cnttP = applicationInfoP[6];
            String mllP = applicationInfoP[7];
            
            DefaultTableModel Pmodel = (DefaultTableModel) PatientInfoTable.getModel();
            Pmodel.addRow(new Object[]{idP, fstnmP, lstnmP, agP, cnttP, mllP});
            WelcomeAccount.setText("Welcome Patient ("+ LogUser.getText()+ ")!");
            PatientScrollPane.setVisible(true);
            PatientReminderPane.setVisible(true);
            ApplyBook.setVisible(true);
            ClinicVisit.setVisible(true);
            Online.setVisible(true);   
            Feedback.setVisible(true);
            Rating.setVisible(true);
            
            jButton5.setEnabled(false);
            PatientLogOFF.setVisible(true);
        }
        else if (LGSAC && !LGPAC && !LGDAC && !DSTS){ // Secretary with no database
            WelcomeAccount.setText("Welcome Secretary ("+ LogUser.getText() +")!");
            ID.setVisible(true);
            IDNumber.setVisible(true);
            FN.setVisible(true);
            FirstName.setVisible(true);
            LN.setVisible(true);
            LastName.setVisible(true);
            AE.setVisible(true);
            Age.setVisible(true);
            CN.setVisible(true);
            Contact.setVisible(true);
            GM.setVisible(true);
            GMail.setVisible(true);
            ApplyInfo1.setVisible(true);
            
            SecretaryScrollPane.setVisible(true);
            PatientBookRequest.setVisible(true);
            SecretaryPatientPane.setVisible(true);
            Approved.setVisible(true);
            Decline.setVisible(true);
            Decline1.setVisible(true);
            
            jButton5.setEnabled(false);
            SecretaryLogOFF.setVisible(true);
        } 
        else if(LGSAC && !LGPAC && !LGDAC && DSTS){ // Secretart with Database
            String[] applicationInfoS = Database_SecretaryToSecretary.SecretaryApplicationDatabase.getApplicationInfo(LogUser.getText(), LogPass.getText());
            
            String idS = applicationInfoS[2];
            String fstnmS = applicationInfoS[3];
            String lstnmS = applicationInfoS[4];
            String agS = applicationInfoS[5];
            String cnttS = applicationInfoS[6];
            String mllS = applicationInfoS[7];
            DefaultTableModel Smodel = (DefaultTableModel) SecretaryInfoTable.getModel();
            Smodel.addRow(new Object[]{idS, fstnmS, lstnmS, agS, cnttS, mllS});
            
            WelcomeAccount.setText("Welcome Patient ("+ LogUser.getText()+ ")!");
            SecretaryScrollPane.setVisible(true);
            PatientBookRequest.setVisible(true);
            SecretaryPatientPane.setVisible(true);
            Approved.setVisible(true);
            Decline.setVisible(true);
            Decline1.setVisible(true);
            
            jButton5.setEnabled(false);
            SecretaryLogOFF.setVisible(true);
        }
        else if (LGDAC && !LGPAC && !LGSAC && !DDTD){ // Doctor with no Database
            WelcomeAccount.setText("Welcome Doctor ("+ LogUser.getText() +")!");
            ID.setVisible(true);
            IDNumber.setVisible(true);
            FN.setVisible(true);
            FirstName.setVisible(true);
            LN.setVisible(true);
            LastName.setVisible(true);
            AE.setVisible(true);
            Age.setVisible(true);
            CN.setVisible(true);
            Contact.setVisible(true);
            GM.setVisible(true);
            GMail.setVisible(true);
            DoctorLogOFF.setVisible(true);
            
            DoctorScrollPane.setVisible(true);
            DoctorAllAccountPane.setVisible(true);
            Modify.setVisible(true);
            CloseModify.setVisible(true);
            Avail.setVisible(true);
            Schedule.setVisible(true);
            Schedule1.setVisible(true);
            jButton5.setEnabled(false);
            ApplyInfo1.setVisible(true);
        }
        else if (LGDAC && !LGPAC && !LGSAC && DDTD){ // Doctor with datatabase
            String[] applicationInfoD = Database_DoctorToDoctor.DoctorApplicationDatabase.getApplicationInfo(LogUser.getText(), LogPass.getText());
            
            String idD = applicationInfoD[2];
            String fstnmD = applicationInfoD[3];
            String lstnmD = applicationInfoD[4];
            String agD = applicationInfoD[5];
            String cnttD = applicationInfoD[6];
            String mllD = applicationInfoD[7];
            
            DefaultTableModel DDmodel = (DefaultTableModel) DoctorInfoTable.getModel();
            DDmodel.addRow(new Object[]{idD, fstnmD, lstnmD, agD, cnttD, mllD});
            
            WelcomeAccount.setText("Welcome Patient ("+ LogUser.getText()+ ")!");
            
            DoctorScrollPane.setVisible(true);
            DoctorAllAccountPane.setVisible(true);
            Modify.setVisible(true);
            CloseModify.setVisible(true);
            Avail.setVisible(true);
            Schedule.setVisible(true);
            Schedule1.setVisible(true);
            jButton5.setEnabled(false);
            DoctorLogOFF.setVisible(true);
        } else {
            LogUser.setText("");
            LogPass.setText("");
            WelcomeAccount.setText("");
            JOptionPane.showMessageDialog(null, "Account Does not Exsist");
            JOptionPane.showMessageDialog(null, "Please Try Again");
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void ApplyInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyInfoActionPerformed
        // TODO add your handling code here:
        LGPAC = false;
        LGPAC = Database.PatientDataRegister.validate(LogUser.getText(), LogPass.getText());
        LGSAC = false;
        LGSAC = Database.SecretaryDataRegister.validate(LogUser.getText(), LogPass.getText());
        LGDAC = false;
        LGDAC = Database.DoctorDataRegister.validate(LogUser.getText(), LogPass.getText());
        DPTS = false;
        DPTS = Database_PatientToSecretary.PatientApplicationDatabase.checkValid(LogUser.getText(), LogPass.getText());
        DSTS = false;
        DSTS = Database_SecretaryToSecretary.SecretaryApplicationDatabase.checkValid(LogUser.getText(), LogPass.getText());
        // PATIENT!!
        if(DPTS){
            JOptionPane.showMessageDialog(null, "This data have been registered by someones account");
        }
        if(LGPAC && !DPTS){ // no database
        ID.setVisible(false);
        IDNumber.setVisible(false);
        FN.setVisible(false);
        FirstName.setVisible(false);
        LN.setVisible(false);
        LastName.setVisible(false);
        AE.setVisible(false);
        Age.setVisible(false);
        CN.setVisible(false);
        Contact.setVisible(false);
        GM.setVisible(false);
        GMail.setVisible(false);
        
        
        DefaultTableModel model = (DefaultTableModel) PatientInfoTable.getModel();
        DefaultTableModel bodel = (DefaultTableModel) SecretaryPatientTable.getModel();
        DefaultTableModel dodel = (DefaultTableModel) DoctorAllAccountTable.getModel(); //this one doctor
        model.addRow(new Object[]{IDNumber.getText(), FirstName.getText(), LastName.getText(), Age.getText(), Contact.getText(), GMail.getText()});
        bodel.addRow(new Object[]{IDNumber.getText(), FirstName.getText(), LastName.getText(), Age.getText(), Contact.getText(), GMail.getText()});
        dodel.addRow(new Object[]{IDNumber.getText(), LogUser.getText(),  FirstName.getText(), LastName.getText(), Age.getText(), Contact.getText(), GMail.getText()});
        
        Database_PatientToSecretary.PatientApplicationDatabase.application(LogUser.getText(), LogPass.getText(), IDNumber.getText(), FirstName.getText(), LastName.getText(), Age.getText(), Contact.getText(), GMail.getText());
        ApplyInfo.setVisible(false);
        
        PatientScrollPane.setVisible(true);
        PatientReminderPane.setVisible(true);
        ApplyBook.setVisible(true);
        ClinicVisit.setVisible(true);
        Online.setVisible(true);   
        Feedback.setVisible(true);
        Rating.setVisible(true);
        IDNumber.setText("");
        FirstName.setText("");
        LastName.setText("");
        Age.setText("");
        Contact.setText("");
        GMail.setText("");
        
        PatientLogOFF.setVisible(true); // Log OFF
        } 

    // end of Patient
        
        // SECRETARY!!
        if(DSTS){JOptionPane.showMessageDialog(null, "This data have been registered by someones account");}
        if(LGSAC && !DSTS){
        ID.setVisible(false);
        IDNumber.setVisible(false);
        FN.setVisible(false);
        FirstName.setVisible(false);
        LN.setVisible(false);
        LastName.setVisible(false);
        AE.setVisible(false);
        Age.setVisible(false);
        CN.setVisible(false);
        Contact.setVisible(false);
        GM.setVisible(false);
        GMail.setVisible(false);
        
        DefaultTableModel qodel = (DefaultTableModel) SecretaryInfoTable.getModel();
        DefaultTableModel DAATmodel = (DefaultTableModel) DoctorAllAccountTable.getModel(); 
        qodel.addRow(new Object[]{IDNumber.getText(), FirstName.getText(), LastName.getText(), Age.getText(), Contact.getText(), GMail.getText()});
        DAATmodel.addRow(new Object[]{IDNumber.getText(), LogUser.getText(),  FirstName.getText(), LastName.getText(), Age.getText(), Contact.getText(), GMail.getText()});
        
        Database_SecretaryToSecretary.SecretaryApplicationDatabase.application(LogUser.getText(), LogPass.getText(), IDNumber.getText(), FirstName.getText(), LastName.getText(), Age.getText(), Contact.getText(), GMail.getText());
        SecretaryScrollPane.setVisible(true);
        PatientBookRequest.setVisible(true);
        Approved.setVisible(true);
        Decline.setVisible(true);
        Decline1.setVisible(true);
        IDNumber.setText("");
        FirstName.setText("");
        LastName.setText("");
        Age.setText("");
        Contact.setText("");
        GMail.setText("");
        ApplyInfo.setVisible(false);
        SecretaryLogOFF.setVisible(true);
        } // end of Secretary
        
        // DOCTOR!!
        if(DDTD){JOptionPane.showMessageDialog(null, "This data have been registered by someones account");}
        if(LGDAC && !DDTD){
        ID.setVisible(false);
        IDNumber.setVisible(false);
        FN.setVisible(false);
        FirstName.setVisible(false);
        LN.setVisible(false);
        LastName.setVisible(false);
        AE.setVisible(false);
        Age.setVisible(false);
        CN.setVisible(false);
        Contact.setVisible(false);
        GM.setVisible(false);
        GMail.setVisible(false);
        
        Database_DoctorToDoctor.DoctorApplicationDatabase.application(LogUser.getText(), LogPass.getText(), IDNumber.getText(), FirstName.getText(), LastName.getText(), Age.getText(), Contact.getText(), GMail.getText());
        
        DefaultTableModel wodel = (DefaultTableModel) DoctorInfoTable.getModel();
        DefaultTableModel DDodel = (DefaultTableModel) DoctorAllAccountTable.getModel();
        wodel.addRow(new Object[]{IDNumber.getText(), FirstName.getText(), LastName.getText(), Age.getText(), Contact.getText(), GMail.getText()});
        DDodel.addRow(new Object[]{IDNumber.getText(), LogUser.getText(),  FirstName.getText(), LastName.getText(), Age.getText(), Contact.getText(), GMail.getText()});
        DoctorScrollPane.setVisible(true);
        DoctorAllAccountPane.setVisible(true);
        Avail.setVisible(true);
        Modify.setVisible(true);
        Schedule.setVisible(true);
        
        CloseModify.setVisible(true);
        DChange.setVisible(false);
        ChangeGMail.setVisible(false);
        ChangeGM.setVisible(false);
        ChangeContact.setVisible(false);
        ChangeCN.setVisible(false);
        ChangeAge.setVisible(false);
        ChangeAE.setVisible(false);
        ChangeLastName.setVisible(false);
        ChangeLN.setVisible(false);
        ChangeFirstName.setVisible(false);
        ChangeFN.setVisible(false);
        IDNumber.setText("");
        FirstName.setText("");
        LastName.setText("");
        Age.setText("");
        Contact.setText("");
        GMail.setText("");
        ApplyInfo.setVisible(false);
        DoctorLogOFF.setVisible(true);
        } // end of Doctor
        
        
        if(!LGPAC && !LGSAC && !LGDAC){
        JOptionPane.showMessageDialog(null, "Please Login First");
        }
    }//GEN-LAST:event_ApplyInfoActionPerformed

    private void ApplyBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyBookActionPerformed
        // TODO add your handling code here:
        BookPatientForm PBF = new BookPatientForm();
        PBF.show();
        //dont do !dispose(); <-------WARNING!
    }//GEN-LAST:event_ApplyBookActionPerformed

    private void ApprovedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApprovedActionPerformed
        // TODO add your handling code here:
        DefaultTableModel sad1 = (DefaultTableModel) PatientBookTable.getModel();

        // Get the selected row index
        int selectedRowTableSS1 = PatientBookTable.getSelectedRow();
        
        z3.setText(sad1.getValueAt( selectedRowTableSS1, 0).toString());
        PatientReminderNotify.Yeeeet.SecNotify(z3.getText(), "Approved");
        JOptionPane.showMessageDialog(null, "Status Updated successfully!", "Approved", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_ApprovedActionPerformed

    private void DeclineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeclineActionPerformed
        // TODO add your handling code here:
        DefaultTableModel sad1 = (DefaultTableModel) PatientBookTable.getModel();

        // Get the selected row index
        int selectedRowTableSS2 = PatientBookTable.getSelectedRow();
        
        z3.setText(sad1.getValueAt( selectedRowTableSS2, 0).toString());
        PatientReminderNotify.Yeeeet.SecNotify(z3.getText(), "Declined");
        JOptionPane.showMessageDialog(null, "Status Updated successfully!", "Declined", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_DeclineActionPerformed

    private void ClinicVisitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClinicVisitActionPerformed
        // TODO add your handling code here:
        DefaultTableModel mdl1 = (DefaultTableModel) PatientInfoTable.getModel();

    // Get the selected row index
    int selectedRowTable = PatientInfoTable.getSelectedRow();
    mdl1.setValueAt("Clinic-Visit", selectedRowTable, 6);
    }//GEN-LAST:event_ClinicVisitActionPerformed

    private void OnlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OnlineActionPerformed
        // TODO add your handling code here:
        DefaultTableModel mdl2 = (DefaultTableModel) PatientInfoTable.getModel();

    // Get the selected row index
    int selectedRowTable = PatientInfoTable.getSelectedRow();
    mdl2.setValueAt("ONLINE", selectedRowTable, 6);
                                             
    }//GEN-LAST:event_OnlineActionPerformed

    private void FeedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FeedbackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FeedbackActionPerformed

    private void RatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RatingActionPerformed
        // TODO add your handling code here:
        DefaultTableModel mdl2341 = (DefaultTableModel) PatientInfoTable.getModel();

        // Get the selected row index
        int selectedRowTable = PatientInfoTable.getSelectedRow();
        z1.setText(mdl2341.getValueAt( selectedRowTable, 1).toString());
        z2.setText(mdl2341.getValueAt(selectedRowTable, 5).toString());
        
        Map<String, String[]> notify = PatientReminderNotify.Yeeeet.notify;
        String patUser = z1.getText();
        String patGmail = z2.getText();

        if (PatientReminderNotify.Yeeeet.NotificationExsist(patUser, patGmail)) {
            // Retrieve the PMessage for the specified User and Gmail
            String pMessage = getNotificationMessage(patUser, patGmail);
            
            // Display PMessage in BodyMessage JTextArea
            DefaultTableModel model626 = (DefaultTableModel) PatientReminderTable.getModel();
            model626.setRowCount(0);
            model626.addRow(new Object[]{pMessage});
        } else {
            // No notification found, display a message
            JOptionPane.showMessageDialog(null, "Notification not found for the specified User and Gmail.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        if (PatientReminderNotify.Yeeeet.NotificationExsistSec(patGmail)) {
            // Retrieve the PMessage for the specified User and Gmail
            String pMessage = getNotificationMessage3(patGmail);
            
            // Display PMessage in BodyMessage JTextArea
            DefaultTableModel model626 = (DefaultTableModel) PatientReminderTable.getModel();
            model626.setRowCount(0);
            model626.addRow(new Object[]{pMessage});
        } else {
            // No notification found, display a message
            JOptionPane.showMessageDialog(null, "Notification not found for the specified User and Gmail.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_RatingActionPerformed
    private String getNotificationMessage3(String patGmail) {
        // Retrieve the PMessage for the specified User and Gmail
        for (String[] userData : PatientReminderNotify.Yeeeet.notify.values()) {
            if (patGmail.equals(userData[0])) {
                return userData[1]; // PMessage is at index 2
            }
        }
        return null; // Return null if not found (you can handle this case differently based on your needs)
    }
    private String getNotificationMessage(String patUser, String patGmail) {
        // Retrieve the PMessage for the specified User and Gmail
        for (String[] userData : PatientReminderNotify.Yeeeet.notify.values()) {
            if (patUser.equals(userData[0]) && patGmail.equals(userData[1])) {
                return userData[2]; // PMessage is at index 2
            }
        }
        return null; // Return null if not found (you can handle this case differently based on your needs)
    }
    private String getNotificationMessage2(String patUser, String patGmail) {
        // Retrieve the PMessage for the specified User and Gmail
        for (String[] userData : PatientReminderNotify.Yeeeet.notify.values()) {
            if (patUser.equals(userData[0]) && patGmail.equals(userData[1])) {
                return userData[0]; // PMessage is at index 2
            }
        }
        return null; // Return null if not found (you can handle this case differently based on your needs)
    }
    
    
    private void AvailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AvailActionPerformed
        // TODO add your handling code here:
        AvailabilitySetting pld = new AvailabilitySetting();
        pld.show();
    }//GEN-LAST:event_AvailActionPerformed

    private void ModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifyActionPerformed
        // TODO add your handling code here:
        DChange.setVisible(true);
        ChangeGMail.setVisible(true);
        ChangeGM.setVisible(true);
        ChangeContact.setVisible(true);
        ChangeCN.setVisible(true);
        ChangeAge.setVisible(true);
        ChangeAE.setVisible(true);
        ChangeLastName.setVisible(true);
        ChangeLN.setVisible(true);
        ChangeFirstName.setVisible(true);
        ChangeFN.setVisible(true);
    }//GEN-LAST:event_ModifyActionPerformed

    private void ScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheduleActionPerformed
        // TODO add your handling code here:
        PatientDoctorSchedule blood = new PatientDoctorSchedule();
        blood.show();
    }//GEN-LAST:event_ScheduleActionPerformed

    private void SecretaryLogOFFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SecretaryLogOFFActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "You have Succesfully LogOFF ( "+ LogUser.getText()+ " )");
        DefaultTableModel slodel = (DefaultTableModel) SecretaryInfoTable.getModel();
        slodel.removeRow(0);
        LogUser.setText("");
        LogPass.setText("");
        WelcomeAccount.setText("");
        ID.setVisible(false);
        IDNumber.setVisible(false);
        FN.setVisible(false);
        FirstName.setVisible(false);
        LN.setVisible(false);
        LastName.setVisible(false);
        AE.setVisible(false);
        Age.setVisible(false);
        CN.setVisible(false);
        Contact.setVisible(false);
        GM.setVisible(false);
        GMail.setVisible(false);
        Approved.setVisible(false);
        Decline.setVisible(false);
        ApplyInfo.setVisible(false);
        PatientBookRequest.setVisible(false); //JTable
        SecretaryScrollPane.setVisible(false); //JTable
        SecretaryPatientPane.setVisible(true); //JTable
        jButton5.setEnabled(true);    
        ApplyInfo.setVisible(false);
        Decline1.setVisible(false);
        SecretaryLogOFF.setVisible(false);
        
    }//GEN-LAST:event_SecretaryLogOFFActionPerformed

    private void PatientLogOFFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PatientLogOFFActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "You have Succesfully LogOFF ( "+ LogUser.getText()+ " )");
        DefaultTableModel plodel = (DefaultTableModel) PatientInfoTable.getModel();
        plodel.removeRow(0);
        LogUser.setText("");
        LogPass.setText("");
        WelcomeAccount.setText("");
        ID.setVisible(false);
        IDNumber.setVisible(false);
        FN.setVisible(false);
        FirstName.setVisible(false);
        LN.setVisible(false);
        LastName.setVisible(false);
        AE.setVisible(false);
        Age.setVisible(false);
        CN.setVisible(false);
        Contact.setVisible(false);
        GM.setVisible(false);
        GMail.setVisible(false);
        ApplyBook.setVisible(false);
        ClinicVisit.setVisible(false);
        Online.setVisible(false);
        Feedback.setVisible(false);
        Rating.setVisible(false);
        PatientScrollPane.setVisible(false);
        PatientReminderPane.setVisible(false);
        ApplyInfo.setVisible(false);
        jButton5.setEnabled(true);
        PatientLogOFF.setVisible(false);
    }//GEN-LAST:event_PatientLogOFFActionPerformed

    private void DoctorLogOFFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoctorLogOFFActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "You have Succesfully LogOFF ( "+ LogUser.getText()+ " )");
        DefaultTableModel plodel = (DefaultTableModel) DoctorInfoTable.getModel();
        plodel.removeRow(0);
        WelcomeAccount.setText("");
        LogUser.setText("");
        LogPass.setText("");
        ID.setVisible(false);
        IDNumber.setVisible(false);
        FN.setVisible(false);
        FirstName.setVisible(false);
        LN.setVisible(false);
        LastName.setVisible(false);
        AE.setVisible(false);
        Age.setVisible(false);
        CN.setVisible(false);
        Contact.setVisible(false);
        GM.setVisible(false);
        GMail.setVisible(false);
        
        DoctorScrollPane.setVisible(false);
        DoctorAllAccountPane.setVisible(false);
        Avail.setVisible(false);
        Modify.setVisible(false);
        Schedule.setVisible(false);
        Schedule1.setVisible(false);
        CloseModify.setVisible(false);
        DChange.setVisible(false);
        ChangeGMail.setVisible(false);
        ChangeGM.setVisible(false);
        ChangeContact.setVisible(false);
        ChangeCN.setVisible(false);
        ChangeAge.setVisible(false);
        ChangeAE.setVisible(false);
        ChangeLastName.setVisible(false);
        ChangeLN.setVisible(false);
        ChangeFirstName.setVisible(false);
        ChangeFN.setVisible(false);
        jButton5.setEnabled(true);
        ApplyInfo.setVisible(false);
        DoctorLogOFF.setVisible(false);
    }//GEN-LAST:event_DoctorLogOFFActionPerformed

    private void LogUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LogUserActionPerformed

    private void ApplyInfo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyInfo1ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Make sure to double check what youve inputted");
        JOptionPane.showMessageDialog(null, "Keep in mind leaving it blank will make the Secretary and Doctor confused");
        ApplyInfo1.setVisible(false);
        ApplyInfo.setVisible(true);
    }//GEN-LAST:event_ApplyInfo1ActionPerformed

    private void DChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DChangeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DChangeActionPerformed

    private void CloseModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseModifyActionPerformed
        // TODO add your handling code here:
        DChange.setVisible(false);
        ChangeGMail.setVisible(false);
        ChangeGM.setVisible(false);
        ChangeContact.setVisible(false);
        ChangeCN.setVisible(false);
        ChangeAge.setVisible(false);
        ChangeAE.setVisible(false);
        ChangeLastName.setVisible(false);
        ChangeLN.setVisible(false);
        ChangeFirstName.setVisible(false);
        ChangeFN.setVisible(false);
    }//GEN-LAST:event_CloseModifyActionPerformed

    private void Schedule1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Schedule1ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Use Your Username, Gmail", "Information", JOptionPane.INFORMATION_MESSAGE);
        MyScheduleAs_Doctor p123 = new MyScheduleAs_Doctor();
        p123.show();
    }//GEN-LAST:event_Schedule1ActionPerformed

    private void Decline1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Decline1ActionPerformed
        // TODO add your handling code here:
         DefaultTableModel modelTwo1 = (DefaultTableModel) PatientBookTable.getModel();

        // Clear existing rows from SearchTable
        modelTwo1.setRowCount(0);

        // Iterate through the data map and add each entry to SearchTable
        for (Map.Entry<String, String[]> entry : PatientReminderNotify.Yeeeet.PStore.entrySet()) {
            String PatGmail = entry.getKey();
            String[] userData = entry.getValue();

            // Extract the relevant data from the userData array
            
            String sts = userData[1];

            // Add the data to SearchTable
            modelTwo1.addRow(new Object[]{PatGmail, sts});
        }
    }//GEN-LAST:event_Decline1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LandingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LandingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LandingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LandingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LandingPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AE;
    private javax.swing.JTextField Age;
    private javax.swing.JButton ApplyBook;
    private javax.swing.JButton ApplyInfo;
    private javax.swing.JButton ApplyInfo1;
    private javax.swing.JButton Approved;
    private javax.swing.JButton Avail;
    private javax.swing.JLabel CN;
    private javax.swing.JLabel ChangeAE;
    private javax.swing.JTextField ChangeAge;
    private javax.swing.JLabel ChangeCN;
    private javax.swing.JTextField ChangeContact;
    private javax.swing.JLabel ChangeFN;
    private javax.swing.JTextField ChangeFirstName;
    private javax.swing.JLabel ChangeGM;
    private javax.swing.JTextField ChangeGMail;
    private javax.swing.JLabel ChangeLN;
    private javax.swing.JTextField ChangeLastName;
    private javax.swing.JButton ClinicVisit;
    private javax.swing.JButton CloseModify;
    private javax.swing.JTextField Contact;
    private javax.swing.JButton DChange;
    private javax.swing.JButton Decline;
    private javax.swing.JButton Decline1;
    private javax.swing.JScrollPane DoctorAllAccountPane;
    private javax.swing.JTable DoctorAllAccountTable;
    private javax.swing.JTable DoctorInfoTable;
    private javax.swing.JButton DoctorLogOFF;
    private javax.swing.JScrollPane DoctorScrollPane;
    private javax.swing.JLabel FN;
    private javax.swing.JButton Feedback;
    private javax.swing.JTextField FirstName;
    private javax.swing.JLabel GM;
    private javax.swing.JTextField GMail;
    private javax.swing.JLabel ID;
    private javax.swing.JTextField IDNumber;
    private javax.swing.JLabel LN;
    private javax.swing.JTextField LastName;
    private javax.swing.JTextField LogPass;
    private javax.swing.JTextField LogUser;
    private javax.swing.JButton Modify;
    private javax.swing.JButton Online;
    private javax.swing.JScrollPane PatientBookRequest;
    private javax.swing.JTable PatientBookTable;
    private javax.swing.JTable PatientInfoTable;
    private javax.swing.JButton PatientLogOFF;
    private javax.swing.JScrollPane PatientReminderPane;
    private javax.swing.JTable PatientReminderTable;
    private javax.swing.JScrollPane PatientScrollPane;
    private javax.swing.JButton Rating;
    private javax.swing.JButton Schedule;
    private javax.swing.JButton Schedule1;
    private javax.swing.JTable SecretaryInfoTable;
    private javax.swing.JButton SecretaryLogOFF;
    private javax.swing.JScrollPane SecretaryPatientPane;
    private javax.swing.JTable SecretaryPatientTable;
    private javax.swing.JScrollPane SecretaryScrollPane;
    private javax.swing.JLabel WelcomeAccount;
    private javax.swing.JLabel component1;
    private javax.swing.JLabel component2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JTextField z1;
    private javax.swing.JTextField z2;
    private javax.swing.JTextField z3;
    private javax.swing.JTextField z4;
    // End of variables declaration//GEN-END:variables
}
